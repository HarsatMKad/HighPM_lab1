package org.example;

import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;
class MainTest {

    @Test
    void enumeration() {
        String[] corretc_result = {"1", "2", "3", "4", "fizz", "6", "buzz", "8", "9", "fizz", "11", "12", "13", "buzz", "fizz", "16", "17", "18", "19", "fizz", "buzz", "22", "23", "24", "fizz", "26", "27", "buzz", "29", "fizz", "31", "32", "33", "34", "fizzbuzz", "36", "37", "38", "39", "fizz", "41", "buzz", "43", "44", "fizz", "46", "47", "48", "buzz", "fizz", "51", "52", "53", "54", "fizz", "buzz", "57", "58", "59", "fizz", "61", "62", "buzz", "64", "fizz", "66", "67", "68", "69", "fizzbuzz", "71", "72", "73", "74", "fizz", "76", "buzz", "78", "79", "fizz", "81", "82", "83", "buzz", "fizz", "86", "87", "88", "89", "fizz", "buzz", "92", "93", "94", "fizz", "96", "97", "buzz", "99", "fizz", "101", "102", "103", "104", "fizzbuzz", "106", "107", "108", "109", "fizz", "111", "buzz", "113", "114", "fizz", "116", "117", "118", "buzz", "fizz", "121", "122", "123", "124", "fizz", "buzz", "127", "128", "129", "fizz", "131", "132", "buzz", "134", "fizz", "136", "137", "138", "139", "fizzbuzz", "141", "142", "143", "144", "fizz", "146", "buzz", "148", "149", "fizz", "151", "152", "153", "buzz", "fizz", "156", "157", "158", "159", "fizz", "buzz", "162", "163", "164", "fizz", "166", "167", "buzz", "169", "fizz", "171", "172", "173", "174", "fizzbuzz", "176", "177", "178", "179", "fizz", "181", "buzz", "183", "184", "fizz", "186", "187", "188", "buzz", "fizz", "191", "192", "193", "194", "fizz", "buzz", "197", "198", "199", "fizz", "201", "202", "buzz", "204", "fizz", "206", "207", "208", "209", "fizzbuzz", "211", "212", "213", "214", "fizz", "216", "buzz", "218", "219", "fizz", "221", "222", "223", "buzz", "fizz", "226", "227", "228", "229", "fizz", "buzz", "232", "233", "234", "fizz", "236", "237", "buzz", "239", "fizz", "241", "242", "243", "244", "fizzbuzz", "246", "247", "248", "249", "fizz", "251", "buzz", "253", "254", "fizz", "256", "257", "258", "buzz", "fizz", "261", "262", "263", "264", "fizz", "buzz", "267", "268", "269", "fizz", "271", "272", "buzz", "274", "fizz", "276", "277", "278", "279", "fizzbuzz", "281", "282", "283", "284", "fizz", "286", "buzz", "288", "289", "fizz", "291", "292", "293", "buzz", "fizz", "296", "297", "298", "299", "fizz", "buzz", "302", "303", "304", "fizz", "306", "307", "buzz", "309", "fizz", "311", "312", "313", "314", "fizzbuzz", "316", "317", "318", "319", "fizz", "321", "buzz", "323", "324", "fizz", "326", "327", "328", "buzz", "fizz", "331", "332", "333", "334", "fizz", "buzz", "337", "338", "339", "fizz", "341", "342", "buzz", "344", "fizz", "346", "347", "348", "349", "fizzbuzz", "351", "352", "353", "354", "fizz", "356", "buzz", "358", "359", "fizz", "361", "362", "363", "buzz", "fizz", "366", "367", "368", "369", "fizz", "buzz", "372", "373", "374", "fizz", "376", "377", "buzz", "379", "fizz", "381", "382", "383", "384", "fizzbuzz", "386", "387", "388", "389", "fizz", "391", "buzz", "393", "394", "fizz", "396", "397", "398", "buzz", "fizz", "401", "402", "403", "404", "fizz", "buzz", "407", "408", "409", "fizz", "411", "412", "buzz", "414", "fizz", "416", "417", "418", "419", "fizzbuzz", "421", "422", "423", "424", "fizz", "426", "buzz", "428", "429", "fizz", "431", "432", "433", "buzz", "fizz", "436", "437", "438", "439", "fizz", "buzz", "442", "443", "444", "fizz", "446", "447", "buzz", "449", "fizz", "451", "452", "453", "454", "fizzbuzz", "456", "457", "458", "459", "fizz", "461", "buzz", "463", "464", "fizz", "466", "467", "468", "buzz", "fizz", "471", "472", "473", "474", "fizz", "buzz", "477", "478", "479", "fizz", "481", "482", "buzz", "484", "fizz", "486", "487", "488", "489", "fizzbuzz", "491", "492", "493", "494", "fizz", "496", "buzz", "498", "499", "fizz"};
        assertArrayEquals(corretc_result, Main.enumeration());
    }

    @Test
    void reversString() {
        assertEquals("llatsni ekam", Main.reversString("make install"));
    }

    @Test
    void realRoots() {
        assertEquals("1.2360679774997898 -3.23606797749979", Main.realRoots(1.0, 2.0, -4.0));
        assertEquals("нет вещественных корней", Main.realRoots(2.0, 4.0, 8.0));
    }

    @Test
    void sumSeries() {
        assertEquals(0.000000999002995010979, Main.sumSeries());
    }

    @Test
    void palindrome() {
        assertEquals(true, Main.palindrome("salas"));
        assertEquals(false, Main.palindrome("qwerty"));
    }
}